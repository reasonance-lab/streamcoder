import streamlit as st
import pygame
import random

# Initialize Pygame
pygame.init()

# Constants
BLOCK_SIZE = 30
GRID_WIDTH = 10
GRID_HEIGHT = 20
SCREEN_WIDTH = BLOCK_SIZE * GRID_WIDTH
SCREEN_HEIGHT = BLOCK_SIZE * GRID_HEIGHT

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
CYAN = (0, 255, 255)
YELLOW = (255, 255, 0)
MAGENTA = (255, 0, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
ORANGE = (255, 165, 0)

# Tetromino shapes
SHAPES = [
    [[1, 1, 1, 1]],
    [[1, 1], [1, 1]],
    [[1, 1, 1], [0, 1, 0]],
    [[1, 1, 1], [1, 0, 0]],
    [[1, 1, 1], [0, 0, 1]],
    [[1, 1, 0], [0, 1, 1]],
    [[0, 1, 1], [1, 1, 0]]
]

# Tetromino colors
SHAPE_COLORS = [CYAN, YELLOW, MAGENTA, RED, GREEN, BLUE, ORANGE]

class Tetromino:
    def __init__(self):
        self.shape = random.choice(SHAPES)
        self.color = random.choice(SHAPE_COLORS)
        self.x = GRID_WIDTH // 2 - len(self.shape[0]) // 2
        self.y = 0

    def rotate(self):
        self.shape = list(zip(*self.shape[::-1]))

class TetrisGame:
    def __init__(self):
        self.grid = [[BLACK for _ in range(GRID_WIDTH)] for _ in range(GRID_HEIGHT)]
        self.current_piece = Tetromino()
        self.score = 0
        self.game_over = False

    def move(self, dx, dy):
        if self.valid_move(self.current_piece, dx, dy):
            self.current_piece.x += dx
            self.current_piece.y += dy
            return True
        return False

    def valid_move(self, piece, dx, dy):
        for y, row in enumerate(piece.shape):
            for x, cell in enumerate(row):
                if cell:
                    new_x, new_y = piece.x + x + dx, piece.y + y + dy
                    if (new_x < 0 or new_x >= GRID_WIDTH or
                        new_y >= GRID_HEIGHT or
                        (new_y >= 0 and self.grid[new_y][new_x] != BLACK)):
                        return False
        return True

    def rotate_piece(self):
        rotated = list(zip(*self.current_piece.shape[::-1]))
        if self.valid_move(self.current_piece, 0, 0):
            self.current_piece.shape = rotated

    def place_piece(self):
        for y, row in enumerate(self.current_piece.shape):
            for x, cell in enumerate(row):
                if cell:
                    self.grid[self.current_piece.y + y][self.current_piece.x + x] = self.current_piece.color
        self.clear_lines()
        self.current_piece = Tetromino()
        if not self.valid_move(self.current_piece, 0, 0):
            self.game_over = True

    def clear_lines(self):
        lines_cleared = 0
        for y in range(GRID_HEIGHT - 1, -1, -1):
            if all(cell != BLACK for cell in self.grid[y]):
                del self.grid[y]
                self.grid.insert(0, [BLACK for _ in range(GRID_WIDTH)])
                lines_cleared += 1
        self.score += lines_cleared ** 2 * 100

    def update(self):
        if not self.game_over:
            if not self.move(0, 1):
                self.place_piece()

    def draw(self, screen):
        screen.fill(BLACK)
        for y, row in enumerate(self.grid):
            for x, color in enumerate(row):
                pygame.draw.rect(screen, color, (x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE))
        for y, row in enumerate(self.current_piece.shape):
            for x, cell in enumerate(row):
                if cell:
                    pygame.draw.rect(screen, self.current_piece.color,
                                     ((self.current_piece.x + x) * BLOCK_SIZE,
                                      (self.current_piece.y + y) * BLOCK_SIZE,
                                      BLOCK_SIZE, BLOCK_SIZE))
        pygame.display.flip()

def main():
    st.set_page_config(page_title="Tetris", layout="wide")
    st.title("Tetris")

    if 'game' not in st.session_state:
        st.session_state.game = TetrisGame()

    game = st.session_state.game

    col1, col2 = st.columns([3, 1])

    with col1:
        canvas = st.empty()

    with col2:
        st.write(f"Score: {game.score}")
        if st.button("New Game"):
            st.session_state.game = TetrisGame()
            game = st.session_state.game

        st.write("Controls:")
        st.write("Left Arrow: Move Left")
        st.write("Right Arrow: Move Right")
        st.write("Down Arrow: Move Down")
        st.write("Up Arrow: Rotate")

    screen = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT))
    clock = pygame.time.Clock()

    def update():
        game.update()
        game.draw(screen)
        canvas.image(pygame.surfarray.array3d(screen).swapaxes(0, 1))

    update()

    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        game.move(-1, 0)
    if keys[pygame.K_RIGHT]:
        game.move(1, 0)
    if keys[pygame.K_DOWN]:
        game.move(0, 1)
    if keys[pygame.K_UP]:
        game.rotate_piece()

    if game.game_over:
        st.write("Game Over!")
        if st.button("Restart"):
            st.session_state.game = TetrisGame()

    st.experimental_rerun()

if __name__ == "__main__":
    main()