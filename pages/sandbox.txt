# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import plotly.graph_objects as go
import plotly.express as px
import plotly.figure_factory as ff

# Generate dates for 3 months
dates = pd.date_range(start="2023-01-01", end="2023-03-31", freq='B')  # 'B' frequency for business days

# Generate fictitious stock prices
np.random.seed(0)
msft_prices = np.random.normal(loc=250, scale=10, size=len(dates)).cumsum()
aapl_prices = np.random.normal(loc=150, scale=5, size=len(dates)).cumsum()

# Create a DataFrame
stock_data = pd.DataFrame({'Date': dates, 'Microsoft': msft_prices, 'Apple': aapl_prices})

# Plot using different interactive plots

# Plotly line chart
fig1 = go.Figure()
fig1.add_trace(go.Scatter(x=stock_data['Date'], y=stock_data['Microsoft'], mode='lines', name='Microsoft'))
fig1.add_trace(go.Scatter(x=stock_data['Date'], y=stock_data['Apple'], mode='lines', name='Apple'))
fig1.update_layout(title='Stock Prices of Microsoft and Apple',
                   xaxis_title='Date',
                   yaxis_title='Stock Price')
fig1.show()

# Plotly candlestick chart for Microsoft
fig2 = go.Figure(data=[go.Candlestick(x=stock_data['Date'],
                                      open=stock_data['Microsoft'] * np.random.uniform(0.95, 1.05, len(stock_data)),
                                      high=stock_data['Microsoft'] * np.random.uniform(1.01, 1.1, len(stock_data)),
                                      low=stock_data['Microsoft'] * np.random.uniform(0.9, 0.99, len(stock_data)),
                                      close=stock_data['Microsoft'])])
fig2.update_layout(title='Microsoft Stock Price - Candlestick Chart',
                   xaxis_title='Date',
                   yaxis_title='Stock Price')
fig2.show()

# Plotly histogram
fig3 = ff.create_distplot([stock_data['Microsoft'].tolist(), stock_data['Apple'].tolist()],
                          ['Microsoft', 'Apple'], bin_size=5)
fig3.update_layout(title='Distribution of Stock Prices',
                   xaxis_title='Stock Price',
                   yaxis_title='Density')
fig3.show()

# Calculate predicted prices for the next 3 months using Linear Regression
future_dates = pd.date_range(start="2023-04-01", end="2023-06-30", freq='B')
X = np.arange(len(dates)).reshape(-1, 1)
future_X = np.arange(len(dates), len(dates) + len(future_dates)).reshape(-1, 1)

# Linear Regression for Microsoft
model_msft = LinearRegression()
model_msft.fit(X, stock_data['Microsoft'])
msft_future_prices = model_msft.predict(future_X)

# Linear Regression for Apple
model_aapl = LinearRegression()
model_aapl.fit(X, stock_data['Apple'])
aapl_future_prices = model_aapl.predict(future_X)

# Append predicted data to the existing data
future_data = pd.DataFrame({'Date': future_dates,
                            'Microsoft': msft_future_prices,
                            'Apple': aapl_future_prices})
combined_data = pd.concat([stock_data, future_data])

# Plot predicted prices along with original prices
fig4 = go.Figure()
fig4.add_trace(go.Scatter(x=combined_data['Date'], y=combined_data['Microsoft'], mode='lines', name='Microsoft'))
fig4.add_trace(go.Scatter(x=combined_data['Date'], y=combined_data['Apple'], mode='lines', name='Apple'))
fig4.update_layout(title='Stock Prices and Predictions for Microsoft and Apple',
                   xaxis_title='Date',
                   yaxis_title='Stock Price')
fig4.show()