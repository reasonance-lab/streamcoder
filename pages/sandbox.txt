import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
from sklearn.linear_model import LinearRegression

# Generate fictitious data
np.random.seed(42)
date_range = pd.date_range(start='2023-01-01', end='2023-03-31', freq='D')
msft_prices = np.random.normal(200, 10, len(date_range)).cumsum() + 200
aapl_prices = np.random.normal(150, 8, len(date_range)).cumsum() + 150

df = pd.DataFrame({
    'Date': date_range,
    'MSFT': msft_prices,
    'AAPL': aapl_prices
})

# Plot 1: Candlestick chart
fig1 = make_subplots(rows=2, cols=1, shared_xaxes=True, vertical_spacing=0.05)

for i, ticker in enumerate(['MSFT', 'AAPL'], 1):
    fig1.add_trace(go.Candlestick(
        x=df['Date'],
        open=df[ticker],
        high=df[ticker] + np.random.uniform(0, 2, len(df)),
        low=df[ticker] - np.random.uniform(0, 2, len(df)),
        close=df[ticker],
        name=ticker
    ), row=i, col=1)

fig1.update_layout(title='Candlestick Chart: MSFT and AAPL', height=800)

# Plot 2: Line chart with range slider
fig2 = go.Figure()
fig2.add_trace(go.Scatter(x=df['Date'], y=df['MSFT'], name='MSFT'))
fig2.add_trace(go.Scatter(x=df['Date'], y=df['AAPL'], name='AAPL'))
fig2.update_layout(title='Line Chart: MSFT and AAPL', xaxis_rangeslider_visible=True)

# Plot 3: Area chart
fig3 = go.Figure()
fig3.add_trace(go.Scatter(x=df['Date'], y=df['MSFT'], fill='tozeroy', name='MSFT'))
fig3.add_trace(go.Scatter(x=df['Date'], y=df['AAPL'], fill='tozeroy', name='AAPL'))
fig3.update_layout(title='Area Chart: MSFT and AAPL')

# Predict prices for the next 3 months
future_dates = pd.date_range(start='2023-04-01', end='2023-06-30', freq='D')

def predict_prices(series):
    X = np.arange(len(series)).reshape(-1, 1)
    y = series.values
    model = LinearRegression()
    model.fit(X, y)
    future_X = np.arange(len(series), len(series) + len(future_dates)).reshape(-1, 1)
    forecast = model.predict(future_X)
    return forecast

msft_forecast = predict_prices(df['MSFT'])
aapl_forecast = predict_prices(df['AAPL'])

# Plot 4: Actual and predicted prices
fig4 = go.Figure()

fig4.add_trace(go.Scatter(x=df['Date'], y=df['MSFT'], name='MSFT Actual'))
fig4.add_trace(go.Scatter(x=df['Date'], y=df['AAPL'], name='AAPL Actual'))
fig4.add_trace(go.Scatter(x=future_dates, y=msft_forecast, name='MSFT Predicted', line=dict(dash='dash')))
fig4.add_trace(go.Scatter(x=future_dates, y=aapl_forecast, name='AAPL Predicted', line=dict(dash='dash')))

fig4.update_layout(title='Actual and Predicted Stock Prices', xaxis_title='Date', yaxis_title='Price')

# Display all plots
fig1.show()
fig2.show()
fig3.show()
fig4.show()